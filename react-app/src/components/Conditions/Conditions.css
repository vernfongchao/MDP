.condition-page-container{
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    background-color: #F1FAEE;
    height: 100%;
    width: 100%;
}

.condition-header{
    font-size: max(1.67vw, 32px);
}

.condition-page-conditions-container{
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
}

.condition-page-cards-container{
    border: 2px solid #1D3557;
    min-width: 300px;
    margin-bottom: 10px;
    
}
.condition-page-cards-container:hover{
    background-color: #A8DADC;
    cursor: pointer;
}

.condition-page-cards-container-name{
    margin: 1rem;
}
/* array stepper
Write a function, arrayStepper, that takes in an array of numbers as an argument. You start at the first position of the array. The function should return a boolean indicating whether or not it is possible to reach the last position of the array. When situated at some position of the array, you may take a maximum number of steps based on the number at that position.
For example, given:

    idx =  0  1  2  3  4  5
numbers = [2, 4, 2, 0, 0, 1]

The answer is true.
We start at idx 0, we could take 1 step or 2 steps forward.
The correct choice is to take 1 step to idx 1.
Then take 4 steps forward to the end at idx 5.

test_00:
arrayStepper([2, 4, 2, 0, 0, 1]); // -> true
test_01:
arrayStepper([2, 3, 2, 0, 0, 1]); // -> false
test_02:
arrayStepper([3, 1, 3, 1, 0, 1]); // -> true
test_03:
arrayStepper([4, 1, 5, 1, 1, 1, 0, 4]); // -> true
test_04:
arrayStepper([4, 1, 2, 1, 1, 1, 0, 4]); // -> false
test_05:
arrayStepper([1, 1, 1, 1, 1, 0]); // -> true
test_06:
arrayStepper([1, 1, 1, 1, 0, 0]); // -> false
test_07:
arrayStepper([ 
  31, 30, 29, 28, 27,
  26, 25, 24, 23, 22,
  21, 20, 19, 18, 17,
  16, 15, 14, 13, 12,
  11, 10, 9, 8, 7, 6,
  5, 3, 2, 1, 0, 0, 0
]); // -> false


// intialize stepper(index)
// if nums[index] === 0
return false
// if index > last index 
return true
for(let i = index+1; i < index + numbers[index]; i ++
if (stepper(i))
return true



else return false


return stepper(0)

arrayStepper([2, 4, 2, 0, 0, 1]); // -> true

function stepper(numbers){
	function recursion(index){
		if(index > numbers.length -1){
			return true
		}
		if(numbers[index] === 0){
			return false
		}
		
		for(let i = index +1; i <= index+numbers[index];i++){
			if(recursion(i)){
				return true
			}
}
return false 
}
return recursion(0)
} */
